// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb
//
//import (
//	context "context"
//	ent "customer-service/ent"
//	runtime "entgo.io/contrib/entproto/runtime"
//	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
//	codes "google.golang.org/grpc/codes"
//	status "google.golang.org/grpc/status"
//	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
//	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
//)
//
//// CustomerService implements CustomerServiceServer
//type CustomerService struct {
//	client *ent.Client
//	UnimplementedCustomerServiceServer
//}
//
//// NewCustomerService returns a new CustomerService
//func NewCustomerService(client *ent.Client) *CustomerService {
//	return &CustomerService{
//		client: client,
//	}
//}
//
//// toProtoCustomer transforms the ent type to the pb type
//func toProtoCustomer(e *ent.Customer) (*Customer, error) {
//	v := &Customer{}
//	address := e.Address
//	v.Address = address
//	create_at := timestamppb.New(e.CreateAt)
//	v.CreateAt = create_at
//	email := e.Email
//	v.Email = email
//	id := int64(e.ID)
//	v.Id = id
//	is_active := e.IsActive
//	v.IsActive = is_active
//	license_id := e.LicenseID
//	v.LicenseId = license_id
//	membership_number := wrapperspb.Int64(int64(e.MembershipNumber))
//	v.MembershipNumber = membership_number
//	name := e.Name
//	v.Name = name
//	password := e.Password
//	v.Password = password
//	phone_number := e.PhoneNumber
//	v.PhoneNumber = phone_number
//	role := e.Role
//	v.Role = role
//	update_at := timestamppb.New(e.UpdateAt)
//	v.UpdateAt = update_at
//	return v, nil
//}
//
//// Register implements CustomerServiceServer.Register
//func (svc *CustomerService) Register(ctx context.Context, req *RegisterInput) (*Customer, error) {
//}
//
//// GetCustomerByEmail implements CustomerServiceServer.GetCustomerByEmail
//func (svc *CustomerService) GetCustomerByEmail(ctx context.Context, req *GetCustomerByEmailInput) (*Customer, error) {
//}
//
//// Login implements CustomerServiceServer.Login
//func (svc *CustomerService) Login(ctx context.Context, req *LoginInput) (*Customer, error) {
//}
//
//// Update implements CustomerServiceServer.Update
//func (svc *CustomerService) Update(ctx context.Context, req *UpdateCustomerInput) (*Customer, error) {
//	customer := req.GetCustomer()
//	customerID := int(customer.GetId())
//	m := svc.client.Customer.UpdateOneID(customerID)
//	customerAddress := customer.GetAddress()
//	m.SetAddress(customerAddress)
//	customerCreateAt := runtime.ExtractTime(customer.GetCreateAt())
//	m.SetCreateAt(customerCreateAt)
//	customerEmail := customer.GetEmail()
//	m.SetEmail(customerEmail)
//	customerIsActive := customer.GetIsActive()
//	m.SetIsActive(customerIsActive)
//	customerLicenseID := customer.GetLicenseId()
//	m.SetLicenseID(customerLicenseID)
//	if customer.GetMembershipNumber() != nil {
//		customerMembershipNumber := int(customer.GetMembershipNumber().GetValue())
//		m.SetMembershipNumber(customerMembershipNumber)
//	}
//	customerName := customer.GetName()
//	m.SetName(customerName)
//	customerPassword := customer.GetPassword()
//	m.SetPassword(customerPassword)
//	customerPhoneNumber := customer.GetPhoneNumber()
//	m.SetPhoneNumber(customerPhoneNumber)
//	customerRole := customer.GetRole()
//	m.SetRole(customerRole)
//	customerUpdateAt := runtime.ExtractTime(customer.GetUpdateAt())
//	m.SetUpdateAt(customerUpdateAt)
//
//	res, err := m.Save(ctx)
//	switch {
//	case err == nil:
//		proto, err := toProtoCustomer(res)
//		if err != nil {
//			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
//		}
//		return proto, nil
//	case sqlgraph.IsUniqueConstraintError(err):
//		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
//	case ent.IsConstraintError(err):
//		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
//	default:
//		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
//	}
//
//}
//
//// ChangePassword implements CustomerServiceServer.ChangePassword
//func (svc *CustomerService) ChangePassword(ctx context.Context, req *ChangePasswordInput) (*Customer, error) {
//}
//
//// UpdateRole implements CustomerServiceServer.UpdateRole
//func (svc *CustomerService) UpdateRole(ctx context.Context, req *UpdateRoleInput) (*Customer, error) {
//}
