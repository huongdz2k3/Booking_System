// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	ent "customer-service/ent"
	customer "customer-service/ent/customer"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	runtime "entgo.io/contrib/entproto/runtime"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	strconv "strconv"
)

// CustomerService implements CustomerServiceServer
type CustomerService struct {
	client *ent.Client
	UnimplementedCustomerServiceServer
}

// NewCustomerService returns a new CustomerService
func NewCustomerService(client *ent.Client) *CustomerService {
	return &CustomerService{
		client: client,
	}
}

// toProtoCustomer transforms the ent type to the pb type
func toProtoCustomer(e *ent.Customer) (*Customer, error) {
	v := &Customer{}
	address := e.Address
	v.Address = address
	create_at := timestamppb.New(e.CreateAt)
	v.CreateAt = create_at
	email := e.Email
	v.Email = email
	id := int64(e.ID)
	v.Id = id
	is_active := e.IsActive
	v.IsActive = is_active
	license_id := e.LicenseID
	v.LicenseId = license_id
	if e.MembershipNumber != nil {
		membership_number := int64(*e.MembershipNumber)
		v.MembershipNumber = membership_number
	}
	name := e.Name
	v.Name = name
	password := e.Password
	v.Password = password
	phone_number := e.PhoneNumber
	v.PhoneNumber = phone_number
	role := e.Role
	v.Role = role
	update_at := timestamppb.New(e.UpdateAt)
	v.UpdateAt = update_at
	return v, nil
}

// toProtoCustomerList transforms a list of ent type to a list of pb type
func toProtoCustomerList(e []*ent.Customer) ([]*Customer, error) {
	var pbList []*Customer
	for _, entEntity := range e {
		pbEntity, err := toProtoCustomer(entEntity)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

// Create implements CustomerServiceServer.Create
func (svc *CustomerService) Create(ctx context.Context, req *CreateCustomerRequest) (*Customer, error) {
	customer := req.GetCustomer()
	m, err := svc.createBuilder(customer)
	if err != nil {
		return nil, err
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoCustomer(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements CustomerServiceServer.Get
func (svc *CustomerService) Get(ctx context.Context, req *GetCustomerRequest) (*Customer, error) {
	var (
		err error
		get *ent.Customer
	)
	id := int(req.GetId())
	switch req.GetView() {
	case GetCustomerRequest_VIEW_UNSPECIFIED, GetCustomerRequest_BASIC:
		get, err = svc.client.Customer.Get(ctx, id)
	case GetCustomerRequest_WITH_EDGE_IDS:
		get, err = svc.client.Customer.Query().
			Where(customer.ID(id)).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoCustomer(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Update implements CustomerServiceServer.Update
func (svc *CustomerService) Update(ctx context.Context, req *UpdateCustomerRequest) (*Customer, error) {
	customer := req.GetCustomer()
	customerID := int(customer.GetId())
	m := svc.client.Customer.UpdateOneID(customerID)
	customerAddress := customer.GetAddress()
	m.SetAddress(customerAddress)
	customerCreateAt := runtime.ExtractTime(customer.GetCreateAt())
	m.SetCreateAt(customerCreateAt)
	customerEmail := customer.GetEmail()
	m.SetEmail(customerEmail)
	customerIsActive := customer.GetIsActive()
	m.SetIsActive(customerIsActive)
	customerLicenseID := customer.GetLicenseId()
	m.SetLicenseID(customerLicenseID)
	customerMembershipNumber := int(customer.GetMembershipNumber())
	m.SetMembershipNumber(customerMembershipNumber)
	customerName := customer.GetName()
	m.SetName(customerName)
	customerPassword := customer.GetPassword()
	m.SetPassword(customerPassword)
	customerPhoneNumber := customer.GetPhoneNumber()
	m.SetPhoneNumber(customerPhoneNumber)
	customerRole := customer.GetRole()
	m.SetRole(customerRole)
	customerUpdateAt := runtime.ExtractTime(customer.GetUpdateAt())
	m.SetUpdateAt(customerUpdateAt)

	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoCustomer(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements CustomerServiceServer.Delete
func (svc *CustomerService) Delete(ctx context.Context, req *DeleteCustomerRequest) (*emptypb.Empty, error) {
	var err error
	id := int(req.GetId())
	err = svc.client.Customer.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements CustomerServiceServer.List
func (svc *CustomerService) List(ctx context.Context, req *ListCustomerRequest) (*ListCustomerResponse, error) {
	var (
		err      error
		entList  []*ent.Customer
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.Customer.Query().
		Order(ent.Desc(customer.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		token, err := strconv.ParseInt(string(bytes), 10, 32)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken := int(token)
		listQuery = listQuery.
			Where(customer.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListCustomerRequest_VIEW_UNSPECIFIED, ListCustomerRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListCustomerRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		protoList, err := toProtoCustomerList(entList)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &ListCustomerResponse{
			CustomerList:  protoList,
			NextPageToken: nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// BatchCreate implements CustomerServiceServer.BatchCreate
func (svc *CustomerService) BatchCreate(ctx context.Context, req *BatchCreateCustomersRequest) (*BatchCreateCustomersResponse, error) {
	requests := req.GetRequests()
	if len(requests) > entproto.MaxBatchCreateSize {
		return nil, status.Errorf(codes.InvalidArgument, "batch size cannot be greater than %d", entproto.MaxBatchCreateSize)
	}
	bulk := make([]*ent.CustomerCreate, len(requests))
	for i, req := range requests {
		customer := req.GetCustomer()
		var err error
		bulk[i], err = svc.createBuilder(customer)
		if err != nil {
			return nil, err
		}
	}
	res, err := svc.client.Customer.CreateBulk(bulk...).Save(ctx)
	switch {
	case err == nil:
		protoList, err := toProtoCustomerList(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &BatchCreateCustomersResponse{
			Customers: protoList,
		}, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

func (svc *CustomerService) createBuilder(customer *Customer) (*ent.CustomerCreate, error) {
	m := svc.client.Customer.Create()
	customerAddress := customer.GetAddress()
	m.SetAddress(customerAddress)
	customerCreateAt := runtime.ExtractTime(customer.GetCreateAt())
	m.SetCreateAt(customerCreateAt)
	customerEmail := customer.GetEmail()
	m.SetEmail(customerEmail)
	customerIsActive := customer.GetIsActive()
	m.SetIsActive(customerIsActive)
	customerLicenseID := customer.GetLicenseId()
	m.SetLicenseID(customerLicenseID)
	customerMembershipNumber := int(customer.GetMembershipNumber())
	m.SetMembershipNumber(customerMembershipNumber)
	customerName := customer.GetName()
	m.SetName(customerName)
	customerPassword := customer.GetPassword()
	m.SetPassword(customerPassword)
	customerPhoneNumber := customer.GetPhoneNumber()
	m.SetPhoneNumber(customerPhoneNumber)
	customerRole := customer.GetRole()
	m.SetRole(customerRole)
	customerUpdateAt := runtime.ExtractTime(customer.GetUpdateAt())
	m.SetUpdateAt(customerUpdateAt)
	return m, nil
}
