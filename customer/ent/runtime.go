// Code generated by ent, DO NOT EDIT.

package ent

import (
	"customer-service/ent/customer"
	"customer-service/ent/schema"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	customerFields := schema.Customer{}.Fields()
	_ = customerFields
	// customerDescName is the schema descriptor for name field.
	customerDescName := customerFields[0].Descriptor()
	// customer.NameValidator is a validator for the "name" field. It is called by the builders before save.
	customer.NameValidator = func() func(string) error {
		validators := customerDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// customerDescPhoneNumber is the schema descriptor for phone_number field.
	customerDescPhoneNumber := customerFields[1].Descriptor()
	// customer.PhoneNumberValidator is a validator for the "phone_number" field. It is called by the builders before save.
	customer.PhoneNumberValidator = func() func(string) error {
		validators := customerDescPhoneNumber.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(phone_number string) error {
			for _, fn := range fns {
				if err := fn(phone_number); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// customerDescEmail is the schema descriptor for email field.
	customerDescEmail := customerFields[2].Descriptor()
	// customer.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	customer.EmailValidator = customerDescEmail.Validators[0].(func(string) error)
	// customerDescLicenseID is the schema descriptor for license_id field.
	customerDescLicenseID := customerFields[3].Descriptor()
	// customer.LicenseIDValidator is a validator for the "license_id" field. It is called by the builders before save.
	customer.LicenseIDValidator = customerDescLicenseID.Validators[0].(func(string) error)
	// customerDescAddress is the schema descriptor for address field.
	customerDescAddress := customerFields[4].Descriptor()
	// customer.AddressValidator is a validator for the "address" field. It is called by the builders before save.
	customer.AddressValidator = customerDescAddress.Validators[0].(func(string) error)
	// customerDescMembershipNumber is the schema descriptor for membership_number field.
	customerDescMembershipNumber := customerFields[5].Descriptor()
	// customer.MembershipNumberValidator is a validator for the "membership_number" field. It is called by the builders before save.
	customer.MembershipNumberValidator = customerDescMembershipNumber.Validators[0].(func(int) error)
	// customerDescIsActive is the schema descriptor for is_active field.
	customerDescIsActive := customerFields[6].Descriptor()
	// customer.DefaultIsActive holds the default value on creation for the is_active field.
	customer.DefaultIsActive = customerDescIsActive.Default.(bool)
	// customerDescPassword is the schema descriptor for password field.
	customerDescPassword := customerFields[7].Descriptor()
	// customer.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	customer.PasswordValidator = func() func(string) error {
		validators := customerDescPassword.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(password string) error {
			for _, fn := range fns {
				if err := fn(password); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// customerDescCreateAt is the schema descriptor for create_at field.
	customerDescCreateAt := customerFields[8].Descriptor()
	// customer.DefaultCreateAt holds the default value on creation for the create_at field.
	customer.DefaultCreateAt = customerDescCreateAt.Default.(time.Time)
	// customerDescUpdateAt is the schema descriptor for update_at field.
	customerDescUpdateAt := customerFields[9].Descriptor()
	// customer.DefaultUpdateAt holds the default value on creation for the update_at field.
	customer.DefaultUpdateAt = customerDescUpdateAt.Default.(time.Time)
	// customerDescRole is the schema descriptor for role field.
	customerDescRole := customerFields[10].Descriptor()
	// customer.RoleValidator is a validator for the "role" field. It is called by the builders before save.
	customer.RoleValidator = customerDescRole.Validators[0].(func(string) error)
}
