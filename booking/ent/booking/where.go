// Code generated by ent, DO NOT EDIT.

package booking

import (
	"booking/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Booking {
	return predicate.Booking(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Booking {
	return predicate.Booking(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Booking {
	return predicate.Booking(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Booking {
	return predicate.Booking(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Booking {
	return predicate.Booking(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Booking {
	return predicate.Booking(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Booking {
	return predicate.Booking(sql.FieldLTE(FieldID, id))
}

// BookingCode applies equality check predicate on the "booking_code" field. It's identical to BookingCodeEQ.
func BookingCode(v string) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldBookingCode, v))
}

// BookingDate applies equality check predicate on the "booking_date" field. It's identical to BookingDateEQ.
func BookingDate(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldBookingDate, v))
}

// CancelDate applies equality check predicate on the "cancel_date" field. It's identical to CancelDateEQ.
func CancelDate(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldCancelDate, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldUpdatedAt, v))
}

// FlightID applies equality check predicate on the "flight_id" field. It's identical to FlightIDEQ.
func FlightID(v int) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldFlightID, v))
}

// CustomerID applies equality check predicate on the "customer_id" field. It's identical to CustomerIDEQ.
func CustomerID(v int) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldCustomerID, v))
}

// BookingCodeEQ applies the EQ predicate on the "booking_code" field.
func BookingCodeEQ(v string) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldBookingCode, v))
}

// BookingCodeNEQ applies the NEQ predicate on the "booking_code" field.
func BookingCodeNEQ(v string) predicate.Booking {
	return predicate.Booking(sql.FieldNEQ(FieldBookingCode, v))
}

// BookingCodeIn applies the In predicate on the "booking_code" field.
func BookingCodeIn(vs ...string) predicate.Booking {
	return predicate.Booking(sql.FieldIn(FieldBookingCode, vs...))
}

// BookingCodeNotIn applies the NotIn predicate on the "booking_code" field.
func BookingCodeNotIn(vs ...string) predicate.Booking {
	return predicate.Booking(sql.FieldNotIn(FieldBookingCode, vs...))
}

// BookingCodeGT applies the GT predicate on the "booking_code" field.
func BookingCodeGT(v string) predicate.Booking {
	return predicate.Booking(sql.FieldGT(FieldBookingCode, v))
}

// BookingCodeGTE applies the GTE predicate on the "booking_code" field.
func BookingCodeGTE(v string) predicate.Booking {
	return predicate.Booking(sql.FieldGTE(FieldBookingCode, v))
}

// BookingCodeLT applies the LT predicate on the "booking_code" field.
func BookingCodeLT(v string) predicate.Booking {
	return predicate.Booking(sql.FieldLT(FieldBookingCode, v))
}

// BookingCodeLTE applies the LTE predicate on the "booking_code" field.
func BookingCodeLTE(v string) predicate.Booking {
	return predicate.Booking(sql.FieldLTE(FieldBookingCode, v))
}

// BookingCodeContains applies the Contains predicate on the "booking_code" field.
func BookingCodeContains(v string) predicate.Booking {
	return predicate.Booking(sql.FieldContains(FieldBookingCode, v))
}

// BookingCodeHasPrefix applies the HasPrefix predicate on the "booking_code" field.
func BookingCodeHasPrefix(v string) predicate.Booking {
	return predicate.Booking(sql.FieldHasPrefix(FieldBookingCode, v))
}

// BookingCodeHasSuffix applies the HasSuffix predicate on the "booking_code" field.
func BookingCodeHasSuffix(v string) predicate.Booking {
	return predicate.Booking(sql.FieldHasSuffix(FieldBookingCode, v))
}

// BookingCodeEqualFold applies the EqualFold predicate on the "booking_code" field.
func BookingCodeEqualFold(v string) predicate.Booking {
	return predicate.Booking(sql.FieldEqualFold(FieldBookingCode, v))
}

// BookingCodeContainsFold applies the ContainsFold predicate on the "booking_code" field.
func BookingCodeContainsFold(v string) predicate.Booking {
	return predicate.Booking(sql.FieldContainsFold(FieldBookingCode, v))
}

// BookingDateEQ applies the EQ predicate on the "booking_date" field.
func BookingDateEQ(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldBookingDate, v))
}

// BookingDateNEQ applies the NEQ predicate on the "booking_date" field.
func BookingDateNEQ(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldNEQ(FieldBookingDate, v))
}

// BookingDateIn applies the In predicate on the "booking_date" field.
func BookingDateIn(vs ...time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldIn(FieldBookingDate, vs...))
}

// BookingDateNotIn applies the NotIn predicate on the "booking_date" field.
func BookingDateNotIn(vs ...time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldNotIn(FieldBookingDate, vs...))
}

// BookingDateGT applies the GT predicate on the "booking_date" field.
func BookingDateGT(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldGT(FieldBookingDate, v))
}

// BookingDateGTE applies the GTE predicate on the "booking_date" field.
func BookingDateGTE(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldGTE(FieldBookingDate, v))
}

// BookingDateLT applies the LT predicate on the "booking_date" field.
func BookingDateLT(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldLT(FieldBookingDate, v))
}

// BookingDateLTE applies the LTE predicate on the "booking_date" field.
func BookingDateLTE(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldLTE(FieldBookingDate, v))
}

// CancelDateEQ applies the EQ predicate on the "cancel_date" field.
func CancelDateEQ(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldCancelDate, v))
}

// CancelDateNEQ applies the NEQ predicate on the "cancel_date" field.
func CancelDateNEQ(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldNEQ(FieldCancelDate, v))
}

// CancelDateIn applies the In predicate on the "cancel_date" field.
func CancelDateIn(vs ...time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldIn(FieldCancelDate, vs...))
}

// CancelDateNotIn applies the NotIn predicate on the "cancel_date" field.
func CancelDateNotIn(vs ...time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldNotIn(FieldCancelDate, vs...))
}

// CancelDateGT applies the GT predicate on the "cancel_date" field.
func CancelDateGT(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldGT(FieldCancelDate, v))
}

// CancelDateGTE applies the GTE predicate on the "cancel_date" field.
func CancelDateGTE(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldGTE(FieldCancelDate, v))
}

// CancelDateLT applies the LT predicate on the "cancel_date" field.
func CancelDateLT(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldLT(FieldCancelDate, v))
}

// CancelDateLTE applies the LTE predicate on the "cancel_date" field.
func CancelDateLTE(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldLTE(FieldCancelDate, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldLTE(FieldUpdatedAt, v))
}

// FlightIDEQ applies the EQ predicate on the "flight_id" field.
func FlightIDEQ(v int) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldFlightID, v))
}

// FlightIDNEQ applies the NEQ predicate on the "flight_id" field.
func FlightIDNEQ(v int) predicate.Booking {
	return predicate.Booking(sql.FieldNEQ(FieldFlightID, v))
}

// FlightIDIn applies the In predicate on the "flight_id" field.
func FlightIDIn(vs ...int) predicate.Booking {
	return predicate.Booking(sql.FieldIn(FieldFlightID, vs...))
}

// FlightIDNotIn applies the NotIn predicate on the "flight_id" field.
func FlightIDNotIn(vs ...int) predicate.Booking {
	return predicate.Booking(sql.FieldNotIn(FieldFlightID, vs...))
}

// FlightIDGT applies the GT predicate on the "flight_id" field.
func FlightIDGT(v int) predicate.Booking {
	return predicate.Booking(sql.FieldGT(FieldFlightID, v))
}

// FlightIDGTE applies the GTE predicate on the "flight_id" field.
func FlightIDGTE(v int) predicate.Booking {
	return predicate.Booking(sql.FieldGTE(FieldFlightID, v))
}

// FlightIDLT applies the LT predicate on the "flight_id" field.
func FlightIDLT(v int) predicate.Booking {
	return predicate.Booking(sql.FieldLT(FieldFlightID, v))
}

// FlightIDLTE applies the LTE predicate on the "flight_id" field.
func FlightIDLTE(v int) predicate.Booking {
	return predicate.Booking(sql.FieldLTE(FieldFlightID, v))
}

// CustomerIDEQ applies the EQ predicate on the "customer_id" field.
func CustomerIDEQ(v int) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldCustomerID, v))
}

// CustomerIDNEQ applies the NEQ predicate on the "customer_id" field.
func CustomerIDNEQ(v int) predicate.Booking {
	return predicate.Booking(sql.FieldNEQ(FieldCustomerID, v))
}

// CustomerIDIn applies the In predicate on the "customer_id" field.
func CustomerIDIn(vs ...int) predicate.Booking {
	return predicate.Booking(sql.FieldIn(FieldCustomerID, vs...))
}

// CustomerIDNotIn applies the NotIn predicate on the "customer_id" field.
func CustomerIDNotIn(vs ...int) predicate.Booking {
	return predicate.Booking(sql.FieldNotIn(FieldCustomerID, vs...))
}

// CustomerIDGT applies the GT predicate on the "customer_id" field.
func CustomerIDGT(v int) predicate.Booking {
	return predicate.Booking(sql.FieldGT(FieldCustomerID, v))
}

// CustomerIDGTE applies the GTE predicate on the "customer_id" field.
func CustomerIDGTE(v int) predicate.Booking {
	return predicate.Booking(sql.FieldGTE(FieldCustomerID, v))
}

// CustomerIDLT applies the LT predicate on the "customer_id" field.
func CustomerIDLT(v int) predicate.Booking {
	return predicate.Booking(sql.FieldLT(FieldCustomerID, v))
}

// CustomerIDLTE applies the LTE predicate on the "customer_id" field.
func CustomerIDLTE(v int) predicate.Booking {
	return predicate.Booking(sql.FieldLTE(FieldCustomerID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Booking {
	return predicate.Booking(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Booking {
	return predicate.Booking(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Booking {
	return predicate.Booking(sql.FieldNotIn(FieldStatus, vs...))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Booking) predicate.Booking {
	return predicate.Booking(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Booking) predicate.Booking {
	return predicate.Booking(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Booking) predicate.Booking {
	return predicate.Booking(func(s *sql.Selector) {
		p(s.Not())
	})
}
