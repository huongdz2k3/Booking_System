// Code generated by ent, DO NOT EDIT.

package booking

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the booking type in the database.
	Label = "booking"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBookingCode holds the string denoting the booking_code field in the database.
	FieldBookingCode = "booking_code"
	// FieldBookingDate holds the string denoting the booking_date field in the database.
	FieldBookingDate = "booking_date"
	// FieldCancelDate holds the string denoting the cancel_date field in the database.
	FieldCancelDate = "cancel_date"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldFlightID holds the string denoting the flight_id field in the database.
	FieldFlightID = "flight_id"
	// FieldCustomerID holds the string denoting the customer_id field in the database.
	FieldCustomerID = "customer_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// Table holds the table name of the booking in the database.
	Table = "bookings"
)

// Columns holds all SQL columns for booking fields.
var Columns = []string{
	FieldID,
	FieldBookingCode,
	FieldBookingDate,
	FieldCancelDate,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldFlightID,
	FieldCustomerID,
	FieldStatus,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// BookingCodeValidator is a validator for the "booking_code" field. It is called by the builders before save.
	BookingCodeValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt time.Time
	// FlightIDValidator is a validator for the "flight_id" field. It is called by the builders before save.
	FlightIDValidator func(int) error
	// CustomerIDValidator is a validator for the "customer_id" field. It is called by the builders before save.
	CustomerIDValidator func(int) error
)

// Status defines the type for the "status" enum field.
type Status string

// StatusPROCESS is the default value of the Status enum.
const DefaultStatus = StatusPROCESS

// Status values.
const (
	StatusCANCEL  Status = "CANCEL"
	StatusSUCCESS Status = "SUCCESS"
	StatusPROCESS Status = "PROCESS"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusCANCEL, StatusSUCCESS, StatusPROCESS:
		return nil
	default:
		return fmt.Errorf("booking: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Booking queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByBookingCode orders the results by the booking_code field.
func ByBookingCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBookingCode, opts...).ToFunc()
}

// ByBookingDate orders the results by the booking_date field.
func ByBookingDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBookingDate, opts...).ToFunc()
}

// ByCancelDate orders the results by the cancel_date field.
func ByCancelDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCancelDate, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByFlightID orders the results by the flight_id field.
func ByFlightID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFlightID, opts...).ToFunc()
}

// ByCustomerID orders the results by the customer_id field.
func ByCustomerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomerID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}
