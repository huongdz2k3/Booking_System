// Code generated by ent, DO NOT EDIT.

package ent

import (
	"customer/ent/customer"
	"time"
)

// CreateCustomerInput represents a mutation input for creating customers.
type CreateCustomerInput struct {
	Name             string
	PhoneNumber      string
	Email            string
	LicenseID        string
	Address          string
	MembershipNumber int
	IsActive         *bool
	Password         string
	CreateAt         *time.Time
	UpdateAt         *time.Time
	Role             *customer.Role
}

// Mutate applies the CreateCustomerInput on the CustomerMutation builder.
func (i *CreateCustomerInput) Mutate(m *CustomerMutation) {
	m.SetName(i.Name)
	m.SetPhoneNumber(i.PhoneNumber)
	m.SetEmail(i.Email)
	m.SetLicenseID(i.LicenseID)
	m.SetAddress(i.Address)
	m.SetMembershipNumber(i.MembershipNumber)
	if v := i.IsActive; v != nil {
		m.SetIsActive(*v)
	}
	m.SetPassword(i.Password)
	if v := i.CreateAt; v != nil {
		m.SetCreateAt(*v)
	}
	if v := i.UpdateAt; v != nil {
		m.SetUpdateAt(*v)
	}
	if v := i.Role; v != nil {
		m.SetRole(*v)
	}
}

// SetInput applies the change-set in the CreateCustomerInput on the CustomerCreate builder.
func (c *CustomerCreate) SetInput(i CreateCustomerInput) *CustomerCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCustomerInput represents a mutation input for updating customers.
type UpdateCustomerInput struct {
	Name             *string
	PhoneNumber      *string
	Email            *string
	LicenseID        *string
	Address          *string
	MembershipNumber *int
	IsActive         *bool
	Password         *string
	CreateAt         *time.Time
	UpdateAt         *time.Time
	Role             *customer.Role
}

// Mutate applies the UpdateCustomerInput on the CustomerMutation builder.
func (i *UpdateCustomerInput) Mutate(m *CustomerMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.PhoneNumber; v != nil {
		m.SetPhoneNumber(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.LicenseID; v != nil {
		m.SetLicenseID(*v)
	}
	if v := i.Address; v != nil {
		m.SetAddress(*v)
	}
	if v := i.MembershipNumber; v != nil {
		m.SetMembershipNumber(*v)
	}
	if v := i.IsActive; v != nil {
		m.SetIsActive(*v)
	}
	if v := i.Password; v != nil {
		m.SetPassword(*v)
	}
	if v := i.CreateAt; v != nil {
		m.SetCreateAt(*v)
	}
	if v := i.UpdateAt; v != nil {
		m.SetUpdateAt(*v)
	}
	if v := i.Role; v != nil {
		m.SetRole(*v)
	}
}

// SetInput applies the change-set in the UpdateCustomerInput on the CustomerUpdate builder.
func (c *CustomerUpdate) SetInput(i UpdateCustomerInput) *CustomerUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCustomerInput on the CustomerUpdateOne builder.
func (c *CustomerUpdateOne) SetInput(i UpdateCustomerInput) *CustomerUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
