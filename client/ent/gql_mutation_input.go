// Code generated by ent, DO NOT EDIT.

package ent

import (
	"customer/ent/customer"
	"customer/ent/flight"
	"time"
)

// CreateCustomerInput represents a mutation input for creating customers.
type CreateCustomerInput struct {
	Name             string
	PhoneNumber      string
	Email            string
	LicenseID        string
	Address          string
	MembershipNumber int
	IsActive         *bool
	Password         string
	CreateAt         *time.Time
	UpdateAt         *time.Time
	Role             *customer.Role
}

// Mutate applies the CreateCustomerInput on the CustomerMutation builder.
func (i *CreateCustomerInput) Mutate(m *CustomerMutation) {
	m.SetName(i.Name)
	m.SetPhoneNumber(i.PhoneNumber)
	m.SetEmail(i.Email)
	m.SetLicenseID(i.LicenseID)
	m.SetAddress(i.Address)
	m.SetMembershipNumber(i.MembershipNumber)
	if v := i.IsActive; v != nil {
		m.SetIsActive(*v)
	}
	m.SetPassword(i.Password)
	if v := i.CreateAt; v != nil {
		m.SetCreateAt(*v)
	}
	if v := i.UpdateAt; v != nil {
		m.SetUpdateAt(*v)
	}
	if v := i.Role; v != nil {
		m.SetRole(*v)
	}
}

// SetInput applies the change-set in the CreateCustomerInput on the CustomerCreate builder.
func (c *CustomerCreate) SetInput(i CreateCustomerInput) *CustomerCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCustomerInput represents a mutation input for updating customers.
type UpdateCustomerInput struct {
	Name             *string
	PhoneNumber      *string
	Email            *string
	LicenseID        *string
	Address          *string
	MembershipNumber *int
	IsActive         *bool
	Password         *string
	CreateAt         *time.Time
	UpdateAt         *time.Time
	Role             *customer.Role
}

// Mutate applies the UpdateCustomerInput on the CustomerMutation builder.
func (i *UpdateCustomerInput) Mutate(m *CustomerMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.PhoneNumber; v != nil {
		m.SetPhoneNumber(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.LicenseID; v != nil {
		m.SetLicenseID(*v)
	}
	if v := i.Address; v != nil {
		m.SetAddress(*v)
	}
	if v := i.MembershipNumber; v != nil {
		m.SetMembershipNumber(*v)
	}
	if v := i.IsActive; v != nil {
		m.SetIsActive(*v)
	}
	if v := i.Password; v != nil {
		m.SetPassword(*v)
	}
	if v := i.CreateAt; v != nil {
		m.SetCreateAt(*v)
	}
	if v := i.UpdateAt; v != nil {
		m.SetUpdateAt(*v)
	}
	if v := i.Role; v != nil {
		m.SetRole(*v)
	}
}

// SetInput applies the change-set in the UpdateCustomerInput on the CustomerUpdate builder.
func (c *CustomerUpdate) SetInput(i UpdateCustomerInput) *CustomerUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCustomerInput on the CustomerUpdateOne builder.
func (c *CustomerUpdateOne) SetInput(i UpdateCustomerInput) *CustomerUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateFlightInput represents a mutation input for creating flights.
type CreateFlightInput struct {
	Name           string
	From           string
	To             string
	DepartDate     string
	DepartTime     string
	Status         *flight.Status
	AvailableSlots int
	ReturnDate     *string
	Type           flight.Type
	FlightPlane    string
	CreatedAt      *time.Time
	UpdatedAt      *time.Time
}

// Mutate applies the CreateFlightInput on the FlightMutation builder.
func (i *CreateFlightInput) Mutate(m *FlightMutation) {
	m.SetName(i.Name)
	m.SetFrom(i.From)
	m.SetTo(i.To)
	m.SetDepartDate(i.DepartDate)
	m.SetDepartTime(i.DepartTime)
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	m.SetAvailableSlots(i.AvailableSlots)
	if v := i.ReturnDate; v != nil {
		m.SetReturnDate(*v)
	}
	m.SetType(i.Type)
	m.SetFlightPlane(i.FlightPlane)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
}

// SetInput applies the change-set in the CreateFlightInput on the FlightCreate builder.
func (c *FlightCreate) SetInput(i CreateFlightInput) *FlightCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateFlightInput represents a mutation input for updating flights.
type UpdateFlightInput struct {
	Name            *string
	From            *string
	To              *string
	DepartDate      *string
	DepartTime      *string
	Status          *flight.Status
	AvailableSlots  *int
	ClearReturnDate bool
	ReturnDate      *string
	Type            *flight.Type
	FlightPlane     *string
	CreatedAt       *time.Time
	UpdatedAt       *time.Time
}

// Mutate applies the UpdateFlightInput on the FlightMutation builder.
func (i *UpdateFlightInput) Mutate(m *FlightMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.From; v != nil {
		m.SetFrom(*v)
	}
	if v := i.To; v != nil {
		m.SetTo(*v)
	}
	if v := i.DepartDate; v != nil {
		m.SetDepartDate(*v)
	}
	if v := i.DepartTime; v != nil {
		m.SetDepartTime(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.AvailableSlots; v != nil {
		m.SetAvailableSlots(*v)
	}
	if i.ClearReturnDate {
		m.ClearReturnDate()
	}
	if v := i.ReturnDate; v != nil {
		m.SetReturnDate(*v)
	}
	if v := i.Type; v != nil {
		m.SetType(*v)
	}
	if v := i.FlightPlane; v != nil {
		m.SetFlightPlane(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
}

// SetInput applies the change-set in the UpdateFlightInput on the FlightUpdate builder.
func (c *FlightUpdate) SetInput(i UpdateFlightInput) *FlightUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateFlightInput on the FlightUpdateOne builder.
func (c *FlightUpdateOne) SetInput(i UpdateFlightInput) *FlightUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
