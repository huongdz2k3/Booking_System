// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"customer/ent/customer"
	"customer/ent/predicate"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CustomerUpdate is the builder for updating Customer entities.
type CustomerUpdate struct {
	config
	hooks    []Hook
	mutation *CustomerMutation
}

// Where appends a list predicates to the CustomerUpdate builder.
func (cu *CustomerUpdate) Where(ps ...predicate.Customer) *CustomerUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *CustomerUpdate) SetName(s string) *CustomerUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetPhoneNumber sets the "phone_number" field.
func (cu *CustomerUpdate) SetPhoneNumber(s string) *CustomerUpdate {
	cu.mutation.SetPhoneNumber(s)
	return cu
}

// SetEmail sets the "email" field.
func (cu *CustomerUpdate) SetEmail(s string) *CustomerUpdate {
	cu.mutation.SetEmail(s)
	return cu
}

// SetLicenseID sets the "license_id" field.
func (cu *CustomerUpdate) SetLicenseID(s string) *CustomerUpdate {
	cu.mutation.SetLicenseID(s)
	return cu
}

// SetAddress sets the "address" field.
func (cu *CustomerUpdate) SetAddress(s string) *CustomerUpdate {
	cu.mutation.SetAddress(s)
	return cu
}

// SetMembershipNumber sets the "membership_number" field.
func (cu *CustomerUpdate) SetMembershipNumber(i int) *CustomerUpdate {
	cu.mutation.ResetMembershipNumber()
	cu.mutation.SetMembershipNumber(i)
	return cu
}

// AddMembershipNumber adds i to the "membership_number" field.
func (cu *CustomerUpdate) AddMembershipNumber(i int) *CustomerUpdate {
	cu.mutation.AddMembershipNumber(i)
	return cu
}

// SetIsActive sets the "is_active" field.
func (cu *CustomerUpdate) SetIsActive(b bool) *CustomerUpdate {
	cu.mutation.SetIsActive(b)
	return cu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableIsActive(b *bool) *CustomerUpdate {
	if b != nil {
		cu.SetIsActive(*b)
	}
	return cu
}

// SetPassword sets the "password" field.
func (cu *CustomerUpdate) SetPassword(s string) *CustomerUpdate {
	cu.mutation.SetPassword(s)
	return cu
}

// SetCreateAt sets the "create_at" field.
func (cu *CustomerUpdate) SetCreateAt(t time.Time) *CustomerUpdate {
	cu.mutation.SetCreateAt(t)
	return cu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableCreateAt(t *time.Time) *CustomerUpdate {
	if t != nil {
		cu.SetCreateAt(*t)
	}
	return cu
}

// SetUpdateAt sets the "update_at" field.
func (cu *CustomerUpdate) SetUpdateAt(t time.Time) *CustomerUpdate {
	cu.mutation.SetUpdateAt(t)
	return cu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableUpdateAt(t *time.Time) *CustomerUpdate {
	if t != nil {
		cu.SetUpdateAt(*t)
	}
	return cu
}

// SetRole sets the "role" field.
func (cu *CustomerUpdate) SetRole(c customer.Role) *CustomerUpdate {
	cu.mutation.SetRole(c)
	return cu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableRole(c *customer.Role) *CustomerUpdate {
	if c != nil {
		cu.SetRole(*c)
	}
	return cu
}

// Mutation returns the CustomerMutation object of the builder.
func (cu *CustomerUpdate) Mutation() *CustomerMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CustomerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, CustomerMutation](ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CustomerUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CustomerUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CustomerUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CustomerUpdate) check() error {
	if v, ok := cu.mutation.Name(); ok {
		if err := customer.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Customer.name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.PhoneNumber(); ok {
		if err := customer.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`ent: validator failed for field "Customer.phone_number": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Email(); ok {
		if err := customer.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Customer.email": %w`, err)}
		}
	}
	if v, ok := cu.mutation.LicenseID(); ok {
		if err := customer.LicenseIDValidator(v); err != nil {
			return &ValidationError{Name: "license_id", err: fmt.Errorf(`ent: validator failed for field "Customer.license_id": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Address(); ok {
		if err := customer.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "Customer.address": %w`, err)}
		}
	}
	if v, ok := cu.mutation.MembershipNumber(); ok {
		if err := customer.MembershipNumberValidator(v); err != nil {
			return &ValidationError{Name: "membership_number", err: fmt.Errorf(`ent: validator failed for field "Customer.membership_number": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Password(); ok {
		if err := customer.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "Customer.password": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Role(); ok {
		if err := customer.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "Customer.role": %w`, err)}
		}
	}
	return nil
}

func (cu *CustomerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(customer.Table, customer.Columns, sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(customer.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.PhoneNumber(); ok {
		_spec.SetField(customer.FieldPhoneNumber, field.TypeString, value)
	}
	if value, ok := cu.mutation.Email(); ok {
		_spec.SetField(customer.FieldEmail, field.TypeString, value)
	}
	if value, ok := cu.mutation.LicenseID(); ok {
		_spec.SetField(customer.FieldLicenseID, field.TypeString, value)
	}
	if value, ok := cu.mutation.Address(); ok {
		_spec.SetField(customer.FieldAddress, field.TypeString, value)
	}
	if value, ok := cu.mutation.MembershipNumber(); ok {
		_spec.SetField(customer.FieldMembershipNumber, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedMembershipNumber(); ok {
		_spec.AddField(customer.FieldMembershipNumber, field.TypeInt, value)
	}
	if value, ok := cu.mutation.IsActive(); ok {
		_spec.SetField(customer.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := cu.mutation.Password(); ok {
		_spec.SetField(customer.FieldPassword, field.TypeString, value)
	}
	if value, ok := cu.mutation.CreateAt(); ok {
		_spec.SetField(customer.FieldCreateAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.UpdateAt(); ok {
		_spec.SetField(customer.FieldUpdateAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.Role(); ok {
		_spec.SetField(customer.FieldRole, field.TypeEnum, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CustomerUpdateOne is the builder for updating a single Customer entity.
type CustomerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CustomerMutation
}

// SetName sets the "name" field.
func (cuo *CustomerUpdateOne) SetName(s string) *CustomerUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetPhoneNumber sets the "phone_number" field.
func (cuo *CustomerUpdateOne) SetPhoneNumber(s string) *CustomerUpdateOne {
	cuo.mutation.SetPhoneNumber(s)
	return cuo
}

// SetEmail sets the "email" field.
func (cuo *CustomerUpdateOne) SetEmail(s string) *CustomerUpdateOne {
	cuo.mutation.SetEmail(s)
	return cuo
}

// SetLicenseID sets the "license_id" field.
func (cuo *CustomerUpdateOne) SetLicenseID(s string) *CustomerUpdateOne {
	cuo.mutation.SetLicenseID(s)
	return cuo
}

// SetAddress sets the "address" field.
func (cuo *CustomerUpdateOne) SetAddress(s string) *CustomerUpdateOne {
	cuo.mutation.SetAddress(s)
	return cuo
}

// SetMembershipNumber sets the "membership_number" field.
func (cuo *CustomerUpdateOne) SetMembershipNumber(i int) *CustomerUpdateOne {
	cuo.mutation.ResetMembershipNumber()
	cuo.mutation.SetMembershipNumber(i)
	return cuo
}

// AddMembershipNumber adds i to the "membership_number" field.
func (cuo *CustomerUpdateOne) AddMembershipNumber(i int) *CustomerUpdateOne {
	cuo.mutation.AddMembershipNumber(i)
	return cuo
}

// SetIsActive sets the "is_active" field.
func (cuo *CustomerUpdateOne) SetIsActive(b bool) *CustomerUpdateOne {
	cuo.mutation.SetIsActive(b)
	return cuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableIsActive(b *bool) *CustomerUpdateOne {
	if b != nil {
		cuo.SetIsActive(*b)
	}
	return cuo
}

// SetPassword sets the "password" field.
func (cuo *CustomerUpdateOne) SetPassword(s string) *CustomerUpdateOne {
	cuo.mutation.SetPassword(s)
	return cuo
}

// SetCreateAt sets the "create_at" field.
func (cuo *CustomerUpdateOne) SetCreateAt(t time.Time) *CustomerUpdateOne {
	cuo.mutation.SetCreateAt(t)
	return cuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableCreateAt(t *time.Time) *CustomerUpdateOne {
	if t != nil {
		cuo.SetCreateAt(*t)
	}
	return cuo
}

// SetUpdateAt sets the "update_at" field.
func (cuo *CustomerUpdateOne) SetUpdateAt(t time.Time) *CustomerUpdateOne {
	cuo.mutation.SetUpdateAt(t)
	return cuo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableUpdateAt(t *time.Time) *CustomerUpdateOne {
	if t != nil {
		cuo.SetUpdateAt(*t)
	}
	return cuo
}

// SetRole sets the "role" field.
func (cuo *CustomerUpdateOne) SetRole(c customer.Role) *CustomerUpdateOne {
	cuo.mutation.SetRole(c)
	return cuo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableRole(c *customer.Role) *CustomerUpdateOne {
	if c != nil {
		cuo.SetRole(*c)
	}
	return cuo
}

// Mutation returns the CustomerMutation object of the builder.
func (cuo *CustomerUpdateOne) Mutation() *CustomerMutation {
	return cuo.mutation
}

// Where appends a list predicates to the CustomerUpdate builder.
func (cuo *CustomerUpdateOne) Where(ps ...predicate.Customer) *CustomerUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CustomerUpdateOne) Select(field string, fields ...string) *CustomerUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Customer entity.
func (cuo *CustomerUpdateOne) Save(ctx context.Context) (*Customer, error) {
	return withHooks[*Customer, CustomerMutation](ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CustomerUpdateOne) SaveX(ctx context.Context) *Customer {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CustomerUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CustomerUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CustomerUpdateOne) check() error {
	if v, ok := cuo.mutation.Name(); ok {
		if err := customer.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Customer.name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.PhoneNumber(); ok {
		if err := customer.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`ent: validator failed for field "Customer.phone_number": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Email(); ok {
		if err := customer.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Customer.email": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.LicenseID(); ok {
		if err := customer.LicenseIDValidator(v); err != nil {
			return &ValidationError{Name: "license_id", err: fmt.Errorf(`ent: validator failed for field "Customer.license_id": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Address(); ok {
		if err := customer.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "Customer.address": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.MembershipNumber(); ok {
		if err := customer.MembershipNumberValidator(v); err != nil {
			return &ValidationError{Name: "membership_number", err: fmt.Errorf(`ent: validator failed for field "Customer.membership_number": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Password(); ok {
		if err := customer.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "Customer.password": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Role(); ok {
		if err := customer.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "Customer.role": %w`, err)}
		}
	}
	return nil
}

func (cuo *CustomerUpdateOne) sqlSave(ctx context.Context) (_node *Customer, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(customer.Table, customer.Columns, sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Customer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customer.FieldID)
		for _, f := range fields {
			if !customer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != customer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(customer.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.PhoneNumber(); ok {
		_spec.SetField(customer.FieldPhoneNumber, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Email(); ok {
		_spec.SetField(customer.FieldEmail, field.TypeString, value)
	}
	if value, ok := cuo.mutation.LicenseID(); ok {
		_spec.SetField(customer.FieldLicenseID, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Address(); ok {
		_spec.SetField(customer.FieldAddress, field.TypeString, value)
	}
	if value, ok := cuo.mutation.MembershipNumber(); ok {
		_spec.SetField(customer.FieldMembershipNumber, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedMembershipNumber(); ok {
		_spec.AddField(customer.FieldMembershipNumber, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.IsActive(); ok {
		_spec.SetField(customer.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.Password(); ok {
		_spec.SetField(customer.FieldPassword, field.TypeString, value)
	}
	if value, ok := cuo.mutation.CreateAt(); ok {
		_spec.SetField(customer.FieldCreateAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.UpdateAt(); ok {
		_spec.SetField(customer.FieldUpdateAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.Role(); ok {
		_spec.SetField(customer.FieldRole, field.TypeEnum, value)
	}
	_node = &Customer{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
