// Code generated by ent, DO NOT EDIT.

package booking

import (
	"customer/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Booking {
	return predicate.Booking(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Booking {
	return predicate.Booking(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Booking {
	return predicate.Booking(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Booking {
	return predicate.Booking(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Booking {
	return predicate.Booking(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Booking {
	return predicate.Booking(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Booking {
	return predicate.Booking(sql.FieldLTE(FieldID, id))
}

// BookingCode applies equality check predicate on the "booking_code" field. It's identical to BookingCodeEQ.
func BookingCode(v string) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldBookingCode, v))
}

// BookingDate applies equality check predicate on the "booking_date" field. It's identical to BookingDateEQ.
func BookingDate(v string) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldBookingDate, v))
}

// CancelDate applies equality check predicate on the "cancel_date" field. It's identical to CancelDateEQ.
func CancelDate(v string) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldCancelDate, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldUpdatedAt, v))
}

// FlightID applies equality check predicate on the "flight_id" field. It's identical to FlightIDEQ.
func FlightID(v int) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldFlightID, v))
}

// CustomerID applies equality check predicate on the "customer_id" field. It's identical to CustomerIDEQ.
func CustomerID(v int) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldCustomerID, v))
}

// CustomerName applies equality check predicate on the "customer_name" field. It's identical to CustomerNameEQ.
func CustomerName(v string) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldCustomerName, v))
}

// PhoneNumber applies equality check predicate on the "phone_number" field. It's identical to PhoneNumberEQ.
func PhoneNumber(v string) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldPhoneNumber, v))
}

// Dob applies equality check predicate on the "dob" field. It's identical to DobEQ.
func Dob(v string) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldDob, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldEmail, v))
}

// LicenseID applies equality check predicate on the "license_id" field. It's identical to LicenseIDEQ.
func LicenseID(v string) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldLicenseID, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldAddress, v))
}

// BookingCodeEQ applies the EQ predicate on the "booking_code" field.
func BookingCodeEQ(v string) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldBookingCode, v))
}

// BookingCodeNEQ applies the NEQ predicate on the "booking_code" field.
func BookingCodeNEQ(v string) predicate.Booking {
	return predicate.Booking(sql.FieldNEQ(FieldBookingCode, v))
}

// BookingCodeIn applies the In predicate on the "booking_code" field.
func BookingCodeIn(vs ...string) predicate.Booking {
	return predicate.Booking(sql.FieldIn(FieldBookingCode, vs...))
}

// BookingCodeNotIn applies the NotIn predicate on the "booking_code" field.
func BookingCodeNotIn(vs ...string) predicate.Booking {
	return predicate.Booking(sql.FieldNotIn(FieldBookingCode, vs...))
}

// BookingCodeGT applies the GT predicate on the "booking_code" field.
func BookingCodeGT(v string) predicate.Booking {
	return predicate.Booking(sql.FieldGT(FieldBookingCode, v))
}

// BookingCodeGTE applies the GTE predicate on the "booking_code" field.
func BookingCodeGTE(v string) predicate.Booking {
	return predicate.Booking(sql.FieldGTE(FieldBookingCode, v))
}

// BookingCodeLT applies the LT predicate on the "booking_code" field.
func BookingCodeLT(v string) predicate.Booking {
	return predicate.Booking(sql.FieldLT(FieldBookingCode, v))
}

// BookingCodeLTE applies the LTE predicate on the "booking_code" field.
func BookingCodeLTE(v string) predicate.Booking {
	return predicate.Booking(sql.FieldLTE(FieldBookingCode, v))
}

// BookingCodeContains applies the Contains predicate on the "booking_code" field.
func BookingCodeContains(v string) predicate.Booking {
	return predicate.Booking(sql.FieldContains(FieldBookingCode, v))
}

// BookingCodeHasPrefix applies the HasPrefix predicate on the "booking_code" field.
func BookingCodeHasPrefix(v string) predicate.Booking {
	return predicate.Booking(sql.FieldHasPrefix(FieldBookingCode, v))
}

// BookingCodeHasSuffix applies the HasSuffix predicate on the "booking_code" field.
func BookingCodeHasSuffix(v string) predicate.Booking {
	return predicate.Booking(sql.FieldHasSuffix(FieldBookingCode, v))
}

// BookingCodeEqualFold applies the EqualFold predicate on the "booking_code" field.
func BookingCodeEqualFold(v string) predicate.Booking {
	return predicate.Booking(sql.FieldEqualFold(FieldBookingCode, v))
}

// BookingCodeContainsFold applies the ContainsFold predicate on the "booking_code" field.
func BookingCodeContainsFold(v string) predicate.Booking {
	return predicate.Booking(sql.FieldContainsFold(FieldBookingCode, v))
}

// BookingDateEQ applies the EQ predicate on the "booking_date" field.
func BookingDateEQ(v string) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldBookingDate, v))
}

// BookingDateNEQ applies the NEQ predicate on the "booking_date" field.
func BookingDateNEQ(v string) predicate.Booking {
	return predicate.Booking(sql.FieldNEQ(FieldBookingDate, v))
}

// BookingDateIn applies the In predicate on the "booking_date" field.
func BookingDateIn(vs ...string) predicate.Booking {
	return predicate.Booking(sql.FieldIn(FieldBookingDate, vs...))
}

// BookingDateNotIn applies the NotIn predicate on the "booking_date" field.
func BookingDateNotIn(vs ...string) predicate.Booking {
	return predicate.Booking(sql.FieldNotIn(FieldBookingDate, vs...))
}

// BookingDateGT applies the GT predicate on the "booking_date" field.
func BookingDateGT(v string) predicate.Booking {
	return predicate.Booking(sql.FieldGT(FieldBookingDate, v))
}

// BookingDateGTE applies the GTE predicate on the "booking_date" field.
func BookingDateGTE(v string) predicate.Booking {
	return predicate.Booking(sql.FieldGTE(FieldBookingDate, v))
}

// BookingDateLT applies the LT predicate on the "booking_date" field.
func BookingDateLT(v string) predicate.Booking {
	return predicate.Booking(sql.FieldLT(FieldBookingDate, v))
}

// BookingDateLTE applies the LTE predicate on the "booking_date" field.
func BookingDateLTE(v string) predicate.Booking {
	return predicate.Booking(sql.FieldLTE(FieldBookingDate, v))
}

// BookingDateContains applies the Contains predicate on the "booking_date" field.
func BookingDateContains(v string) predicate.Booking {
	return predicate.Booking(sql.FieldContains(FieldBookingDate, v))
}

// BookingDateHasPrefix applies the HasPrefix predicate on the "booking_date" field.
func BookingDateHasPrefix(v string) predicate.Booking {
	return predicate.Booking(sql.FieldHasPrefix(FieldBookingDate, v))
}

// BookingDateHasSuffix applies the HasSuffix predicate on the "booking_date" field.
func BookingDateHasSuffix(v string) predicate.Booking {
	return predicate.Booking(sql.FieldHasSuffix(FieldBookingDate, v))
}

// BookingDateEqualFold applies the EqualFold predicate on the "booking_date" field.
func BookingDateEqualFold(v string) predicate.Booking {
	return predicate.Booking(sql.FieldEqualFold(FieldBookingDate, v))
}

// BookingDateContainsFold applies the ContainsFold predicate on the "booking_date" field.
func BookingDateContainsFold(v string) predicate.Booking {
	return predicate.Booking(sql.FieldContainsFold(FieldBookingDate, v))
}

// CancelDateEQ applies the EQ predicate on the "cancel_date" field.
func CancelDateEQ(v string) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldCancelDate, v))
}

// CancelDateNEQ applies the NEQ predicate on the "cancel_date" field.
func CancelDateNEQ(v string) predicate.Booking {
	return predicate.Booking(sql.FieldNEQ(FieldCancelDate, v))
}

// CancelDateIn applies the In predicate on the "cancel_date" field.
func CancelDateIn(vs ...string) predicate.Booking {
	return predicate.Booking(sql.FieldIn(FieldCancelDate, vs...))
}

// CancelDateNotIn applies the NotIn predicate on the "cancel_date" field.
func CancelDateNotIn(vs ...string) predicate.Booking {
	return predicate.Booking(sql.FieldNotIn(FieldCancelDate, vs...))
}

// CancelDateGT applies the GT predicate on the "cancel_date" field.
func CancelDateGT(v string) predicate.Booking {
	return predicate.Booking(sql.FieldGT(FieldCancelDate, v))
}

// CancelDateGTE applies the GTE predicate on the "cancel_date" field.
func CancelDateGTE(v string) predicate.Booking {
	return predicate.Booking(sql.FieldGTE(FieldCancelDate, v))
}

// CancelDateLT applies the LT predicate on the "cancel_date" field.
func CancelDateLT(v string) predicate.Booking {
	return predicate.Booking(sql.FieldLT(FieldCancelDate, v))
}

// CancelDateLTE applies the LTE predicate on the "cancel_date" field.
func CancelDateLTE(v string) predicate.Booking {
	return predicate.Booking(sql.FieldLTE(FieldCancelDate, v))
}

// CancelDateContains applies the Contains predicate on the "cancel_date" field.
func CancelDateContains(v string) predicate.Booking {
	return predicate.Booking(sql.FieldContains(FieldCancelDate, v))
}

// CancelDateHasPrefix applies the HasPrefix predicate on the "cancel_date" field.
func CancelDateHasPrefix(v string) predicate.Booking {
	return predicate.Booking(sql.FieldHasPrefix(FieldCancelDate, v))
}

// CancelDateHasSuffix applies the HasSuffix predicate on the "cancel_date" field.
func CancelDateHasSuffix(v string) predicate.Booking {
	return predicate.Booking(sql.FieldHasSuffix(FieldCancelDate, v))
}

// CancelDateEqualFold applies the EqualFold predicate on the "cancel_date" field.
func CancelDateEqualFold(v string) predicate.Booking {
	return predicate.Booking(sql.FieldEqualFold(FieldCancelDate, v))
}

// CancelDateContainsFold applies the ContainsFold predicate on the "cancel_date" field.
func CancelDateContainsFold(v string) predicate.Booking {
	return predicate.Booking(sql.FieldContainsFold(FieldCancelDate, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldLTE(FieldUpdatedAt, v))
}

// FlightIDEQ applies the EQ predicate on the "flight_id" field.
func FlightIDEQ(v int) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldFlightID, v))
}

// FlightIDNEQ applies the NEQ predicate on the "flight_id" field.
func FlightIDNEQ(v int) predicate.Booking {
	return predicate.Booking(sql.FieldNEQ(FieldFlightID, v))
}

// FlightIDIn applies the In predicate on the "flight_id" field.
func FlightIDIn(vs ...int) predicate.Booking {
	return predicate.Booking(sql.FieldIn(FieldFlightID, vs...))
}

// FlightIDNotIn applies the NotIn predicate on the "flight_id" field.
func FlightIDNotIn(vs ...int) predicate.Booking {
	return predicate.Booking(sql.FieldNotIn(FieldFlightID, vs...))
}

// FlightIDGT applies the GT predicate on the "flight_id" field.
func FlightIDGT(v int) predicate.Booking {
	return predicate.Booking(sql.FieldGT(FieldFlightID, v))
}

// FlightIDGTE applies the GTE predicate on the "flight_id" field.
func FlightIDGTE(v int) predicate.Booking {
	return predicate.Booking(sql.FieldGTE(FieldFlightID, v))
}

// FlightIDLT applies the LT predicate on the "flight_id" field.
func FlightIDLT(v int) predicate.Booking {
	return predicate.Booking(sql.FieldLT(FieldFlightID, v))
}

// FlightIDLTE applies the LTE predicate on the "flight_id" field.
func FlightIDLTE(v int) predicate.Booking {
	return predicate.Booking(sql.FieldLTE(FieldFlightID, v))
}

// CustomerIDEQ applies the EQ predicate on the "customer_id" field.
func CustomerIDEQ(v int) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldCustomerID, v))
}

// CustomerIDNEQ applies the NEQ predicate on the "customer_id" field.
func CustomerIDNEQ(v int) predicate.Booking {
	return predicate.Booking(sql.FieldNEQ(FieldCustomerID, v))
}

// CustomerIDIn applies the In predicate on the "customer_id" field.
func CustomerIDIn(vs ...int) predicate.Booking {
	return predicate.Booking(sql.FieldIn(FieldCustomerID, vs...))
}

// CustomerIDNotIn applies the NotIn predicate on the "customer_id" field.
func CustomerIDNotIn(vs ...int) predicate.Booking {
	return predicate.Booking(sql.FieldNotIn(FieldCustomerID, vs...))
}

// CustomerIDGT applies the GT predicate on the "customer_id" field.
func CustomerIDGT(v int) predicate.Booking {
	return predicate.Booking(sql.FieldGT(FieldCustomerID, v))
}

// CustomerIDGTE applies the GTE predicate on the "customer_id" field.
func CustomerIDGTE(v int) predicate.Booking {
	return predicate.Booking(sql.FieldGTE(FieldCustomerID, v))
}

// CustomerIDLT applies the LT predicate on the "customer_id" field.
func CustomerIDLT(v int) predicate.Booking {
	return predicate.Booking(sql.FieldLT(FieldCustomerID, v))
}

// CustomerIDLTE applies the LTE predicate on the "customer_id" field.
func CustomerIDLTE(v int) predicate.Booking {
	return predicate.Booking(sql.FieldLTE(FieldCustomerID, v))
}

// CustomerIDIsNil applies the IsNil predicate on the "customer_id" field.
func CustomerIDIsNil() predicate.Booking {
	return predicate.Booking(sql.FieldIsNull(FieldCustomerID))
}

// CustomerIDNotNil applies the NotNil predicate on the "customer_id" field.
func CustomerIDNotNil() predicate.Booking {
	return predicate.Booking(sql.FieldNotNull(FieldCustomerID))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Booking {
	return predicate.Booking(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Booking {
	return predicate.Booking(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Booking {
	return predicate.Booking(sql.FieldNotIn(FieldStatus, vs...))
}

// CustomerNameEQ applies the EQ predicate on the "customer_name" field.
func CustomerNameEQ(v string) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldCustomerName, v))
}

// CustomerNameNEQ applies the NEQ predicate on the "customer_name" field.
func CustomerNameNEQ(v string) predicate.Booking {
	return predicate.Booking(sql.FieldNEQ(FieldCustomerName, v))
}

// CustomerNameIn applies the In predicate on the "customer_name" field.
func CustomerNameIn(vs ...string) predicate.Booking {
	return predicate.Booking(sql.FieldIn(FieldCustomerName, vs...))
}

// CustomerNameNotIn applies the NotIn predicate on the "customer_name" field.
func CustomerNameNotIn(vs ...string) predicate.Booking {
	return predicate.Booking(sql.FieldNotIn(FieldCustomerName, vs...))
}

// CustomerNameGT applies the GT predicate on the "customer_name" field.
func CustomerNameGT(v string) predicate.Booking {
	return predicate.Booking(sql.FieldGT(FieldCustomerName, v))
}

// CustomerNameGTE applies the GTE predicate on the "customer_name" field.
func CustomerNameGTE(v string) predicate.Booking {
	return predicate.Booking(sql.FieldGTE(FieldCustomerName, v))
}

// CustomerNameLT applies the LT predicate on the "customer_name" field.
func CustomerNameLT(v string) predicate.Booking {
	return predicate.Booking(sql.FieldLT(FieldCustomerName, v))
}

// CustomerNameLTE applies the LTE predicate on the "customer_name" field.
func CustomerNameLTE(v string) predicate.Booking {
	return predicate.Booking(sql.FieldLTE(FieldCustomerName, v))
}

// CustomerNameContains applies the Contains predicate on the "customer_name" field.
func CustomerNameContains(v string) predicate.Booking {
	return predicate.Booking(sql.FieldContains(FieldCustomerName, v))
}

// CustomerNameHasPrefix applies the HasPrefix predicate on the "customer_name" field.
func CustomerNameHasPrefix(v string) predicate.Booking {
	return predicate.Booking(sql.FieldHasPrefix(FieldCustomerName, v))
}

// CustomerNameHasSuffix applies the HasSuffix predicate on the "customer_name" field.
func CustomerNameHasSuffix(v string) predicate.Booking {
	return predicate.Booking(sql.FieldHasSuffix(FieldCustomerName, v))
}

// CustomerNameEqualFold applies the EqualFold predicate on the "customer_name" field.
func CustomerNameEqualFold(v string) predicate.Booking {
	return predicate.Booking(sql.FieldEqualFold(FieldCustomerName, v))
}

// CustomerNameContainsFold applies the ContainsFold predicate on the "customer_name" field.
func CustomerNameContainsFold(v string) predicate.Booking {
	return predicate.Booking(sql.FieldContainsFold(FieldCustomerName, v))
}

// PhoneNumberEQ applies the EQ predicate on the "phone_number" field.
func PhoneNumberEQ(v string) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldPhoneNumber, v))
}

// PhoneNumberNEQ applies the NEQ predicate on the "phone_number" field.
func PhoneNumberNEQ(v string) predicate.Booking {
	return predicate.Booking(sql.FieldNEQ(FieldPhoneNumber, v))
}

// PhoneNumberIn applies the In predicate on the "phone_number" field.
func PhoneNumberIn(vs ...string) predicate.Booking {
	return predicate.Booking(sql.FieldIn(FieldPhoneNumber, vs...))
}

// PhoneNumberNotIn applies the NotIn predicate on the "phone_number" field.
func PhoneNumberNotIn(vs ...string) predicate.Booking {
	return predicate.Booking(sql.FieldNotIn(FieldPhoneNumber, vs...))
}

// PhoneNumberGT applies the GT predicate on the "phone_number" field.
func PhoneNumberGT(v string) predicate.Booking {
	return predicate.Booking(sql.FieldGT(FieldPhoneNumber, v))
}

// PhoneNumberGTE applies the GTE predicate on the "phone_number" field.
func PhoneNumberGTE(v string) predicate.Booking {
	return predicate.Booking(sql.FieldGTE(FieldPhoneNumber, v))
}

// PhoneNumberLT applies the LT predicate on the "phone_number" field.
func PhoneNumberLT(v string) predicate.Booking {
	return predicate.Booking(sql.FieldLT(FieldPhoneNumber, v))
}

// PhoneNumberLTE applies the LTE predicate on the "phone_number" field.
func PhoneNumberLTE(v string) predicate.Booking {
	return predicate.Booking(sql.FieldLTE(FieldPhoneNumber, v))
}

// PhoneNumberContains applies the Contains predicate on the "phone_number" field.
func PhoneNumberContains(v string) predicate.Booking {
	return predicate.Booking(sql.FieldContains(FieldPhoneNumber, v))
}

// PhoneNumberHasPrefix applies the HasPrefix predicate on the "phone_number" field.
func PhoneNumberHasPrefix(v string) predicate.Booking {
	return predicate.Booking(sql.FieldHasPrefix(FieldPhoneNumber, v))
}

// PhoneNumberHasSuffix applies the HasSuffix predicate on the "phone_number" field.
func PhoneNumberHasSuffix(v string) predicate.Booking {
	return predicate.Booking(sql.FieldHasSuffix(FieldPhoneNumber, v))
}

// PhoneNumberEqualFold applies the EqualFold predicate on the "phone_number" field.
func PhoneNumberEqualFold(v string) predicate.Booking {
	return predicate.Booking(sql.FieldEqualFold(FieldPhoneNumber, v))
}

// PhoneNumberContainsFold applies the ContainsFold predicate on the "phone_number" field.
func PhoneNumberContainsFold(v string) predicate.Booking {
	return predicate.Booking(sql.FieldContainsFold(FieldPhoneNumber, v))
}

// DobEQ applies the EQ predicate on the "dob" field.
func DobEQ(v string) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldDob, v))
}

// DobNEQ applies the NEQ predicate on the "dob" field.
func DobNEQ(v string) predicate.Booking {
	return predicate.Booking(sql.FieldNEQ(FieldDob, v))
}

// DobIn applies the In predicate on the "dob" field.
func DobIn(vs ...string) predicate.Booking {
	return predicate.Booking(sql.FieldIn(FieldDob, vs...))
}

// DobNotIn applies the NotIn predicate on the "dob" field.
func DobNotIn(vs ...string) predicate.Booking {
	return predicate.Booking(sql.FieldNotIn(FieldDob, vs...))
}

// DobGT applies the GT predicate on the "dob" field.
func DobGT(v string) predicate.Booking {
	return predicate.Booking(sql.FieldGT(FieldDob, v))
}

// DobGTE applies the GTE predicate on the "dob" field.
func DobGTE(v string) predicate.Booking {
	return predicate.Booking(sql.FieldGTE(FieldDob, v))
}

// DobLT applies the LT predicate on the "dob" field.
func DobLT(v string) predicate.Booking {
	return predicate.Booking(sql.FieldLT(FieldDob, v))
}

// DobLTE applies the LTE predicate on the "dob" field.
func DobLTE(v string) predicate.Booking {
	return predicate.Booking(sql.FieldLTE(FieldDob, v))
}

// DobContains applies the Contains predicate on the "dob" field.
func DobContains(v string) predicate.Booking {
	return predicate.Booking(sql.FieldContains(FieldDob, v))
}

// DobHasPrefix applies the HasPrefix predicate on the "dob" field.
func DobHasPrefix(v string) predicate.Booking {
	return predicate.Booking(sql.FieldHasPrefix(FieldDob, v))
}

// DobHasSuffix applies the HasSuffix predicate on the "dob" field.
func DobHasSuffix(v string) predicate.Booking {
	return predicate.Booking(sql.FieldHasSuffix(FieldDob, v))
}

// DobEqualFold applies the EqualFold predicate on the "dob" field.
func DobEqualFold(v string) predicate.Booking {
	return predicate.Booking(sql.FieldEqualFold(FieldDob, v))
}

// DobContainsFold applies the ContainsFold predicate on the "dob" field.
func DobContainsFold(v string) predicate.Booking {
	return predicate.Booking(sql.FieldContainsFold(FieldDob, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.Booking {
	return predicate.Booking(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.Booking {
	return predicate.Booking(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.Booking {
	return predicate.Booking(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.Booking {
	return predicate.Booking(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.Booking {
	return predicate.Booking(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.Booking {
	return predicate.Booking(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.Booking {
	return predicate.Booking(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.Booking {
	return predicate.Booking(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.Booking {
	return predicate.Booking(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.Booking {
	return predicate.Booking(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.Booking {
	return predicate.Booking(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.Booking {
	return predicate.Booking(sql.FieldContainsFold(FieldEmail, v))
}

// LicenseIDEQ applies the EQ predicate on the "license_id" field.
func LicenseIDEQ(v string) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldLicenseID, v))
}

// LicenseIDNEQ applies the NEQ predicate on the "license_id" field.
func LicenseIDNEQ(v string) predicate.Booking {
	return predicate.Booking(sql.FieldNEQ(FieldLicenseID, v))
}

// LicenseIDIn applies the In predicate on the "license_id" field.
func LicenseIDIn(vs ...string) predicate.Booking {
	return predicate.Booking(sql.FieldIn(FieldLicenseID, vs...))
}

// LicenseIDNotIn applies the NotIn predicate on the "license_id" field.
func LicenseIDNotIn(vs ...string) predicate.Booking {
	return predicate.Booking(sql.FieldNotIn(FieldLicenseID, vs...))
}

// LicenseIDGT applies the GT predicate on the "license_id" field.
func LicenseIDGT(v string) predicate.Booking {
	return predicate.Booking(sql.FieldGT(FieldLicenseID, v))
}

// LicenseIDGTE applies the GTE predicate on the "license_id" field.
func LicenseIDGTE(v string) predicate.Booking {
	return predicate.Booking(sql.FieldGTE(FieldLicenseID, v))
}

// LicenseIDLT applies the LT predicate on the "license_id" field.
func LicenseIDLT(v string) predicate.Booking {
	return predicate.Booking(sql.FieldLT(FieldLicenseID, v))
}

// LicenseIDLTE applies the LTE predicate on the "license_id" field.
func LicenseIDLTE(v string) predicate.Booking {
	return predicate.Booking(sql.FieldLTE(FieldLicenseID, v))
}

// LicenseIDContains applies the Contains predicate on the "license_id" field.
func LicenseIDContains(v string) predicate.Booking {
	return predicate.Booking(sql.FieldContains(FieldLicenseID, v))
}

// LicenseIDHasPrefix applies the HasPrefix predicate on the "license_id" field.
func LicenseIDHasPrefix(v string) predicate.Booking {
	return predicate.Booking(sql.FieldHasPrefix(FieldLicenseID, v))
}

// LicenseIDHasSuffix applies the HasSuffix predicate on the "license_id" field.
func LicenseIDHasSuffix(v string) predicate.Booking {
	return predicate.Booking(sql.FieldHasSuffix(FieldLicenseID, v))
}

// LicenseIDEqualFold applies the EqualFold predicate on the "license_id" field.
func LicenseIDEqualFold(v string) predicate.Booking {
	return predicate.Booking(sql.FieldEqualFold(FieldLicenseID, v))
}

// LicenseIDContainsFold applies the ContainsFold predicate on the "license_id" field.
func LicenseIDContainsFold(v string) predicate.Booking {
	return predicate.Booking(sql.FieldContainsFold(FieldLicenseID, v))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.Booking {
	return predicate.Booking(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.Booking {
	return predicate.Booking(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.Booking {
	return predicate.Booking(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.Booking {
	return predicate.Booking(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.Booking {
	return predicate.Booking(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.Booking {
	return predicate.Booking(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.Booking {
	return predicate.Booking(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.Booking {
	return predicate.Booking(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.Booking {
	return predicate.Booking(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.Booking {
	return predicate.Booking(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.Booking {
	return predicate.Booking(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.Booking {
	return predicate.Booking(sql.FieldContainsFold(FieldAddress, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Booking) predicate.Booking {
	return predicate.Booking(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Booking) predicate.Booking {
	return predicate.Booking(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Booking) predicate.Booking {
	return predicate.Booking(func(s *sql.Selector) {
		p(s.Not())
	})
}
