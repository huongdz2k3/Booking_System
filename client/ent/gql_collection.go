// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"customer/ent/booking"
	"customer/ent/customer"
	"customer/ent/flight"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (b *BookingQuery) CollectFields(ctx context.Context, satisfies ...string) (*BookingQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return b, nil
	}
	if err := b.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return b, nil
}

func (b *BookingQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(booking.Columns))
		selectedFields = []string{booking.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "bookingCode":
			if _, ok := fieldSeen[booking.FieldBookingCode]; !ok {
				selectedFields = append(selectedFields, booking.FieldBookingCode)
				fieldSeen[booking.FieldBookingCode] = struct{}{}
			}
		case "bookingDate":
			if _, ok := fieldSeen[booking.FieldBookingDate]; !ok {
				selectedFields = append(selectedFields, booking.FieldBookingDate)
				fieldSeen[booking.FieldBookingDate] = struct{}{}
			}
		case "cancelDate":
			if _, ok := fieldSeen[booking.FieldCancelDate]; !ok {
				selectedFields = append(selectedFields, booking.FieldCancelDate)
				fieldSeen[booking.FieldCancelDate] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[booking.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, booking.FieldCreatedAt)
				fieldSeen[booking.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[booking.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, booking.FieldUpdatedAt)
				fieldSeen[booking.FieldUpdatedAt] = struct{}{}
			}
		case "flightID":
			if _, ok := fieldSeen[booking.FieldFlightID]; !ok {
				selectedFields = append(selectedFields, booking.FieldFlightID)
				fieldSeen[booking.FieldFlightID] = struct{}{}
			}
		case "customerID":
			if _, ok := fieldSeen[booking.FieldCustomerID]; !ok {
				selectedFields = append(selectedFields, booking.FieldCustomerID)
				fieldSeen[booking.FieldCustomerID] = struct{}{}
			}
		case "status":
			if _, ok := fieldSeen[booking.FieldStatus]; !ok {
				selectedFields = append(selectedFields, booking.FieldStatus)
				fieldSeen[booking.FieldStatus] = struct{}{}
			}
		case "customerName":
			if _, ok := fieldSeen[booking.FieldCustomerName]; !ok {
				selectedFields = append(selectedFields, booking.FieldCustomerName)
				fieldSeen[booking.FieldCustomerName] = struct{}{}
			}
		case "phoneNumber":
			if _, ok := fieldSeen[booking.FieldPhoneNumber]; !ok {
				selectedFields = append(selectedFields, booking.FieldPhoneNumber)
				fieldSeen[booking.FieldPhoneNumber] = struct{}{}
			}
		case "dob":
			if _, ok := fieldSeen[booking.FieldDob]; !ok {
				selectedFields = append(selectedFields, booking.FieldDob)
				fieldSeen[booking.FieldDob] = struct{}{}
			}
		case "email":
			if _, ok := fieldSeen[booking.FieldEmail]; !ok {
				selectedFields = append(selectedFields, booking.FieldEmail)
				fieldSeen[booking.FieldEmail] = struct{}{}
			}
		case "licenseID":
			if _, ok := fieldSeen[booking.FieldLicenseID]; !ok {
				selectedFields = append(selectedFields, booking.FieldLicenseID)
				fieldSeen[booking.FieldLicenseID] = struct{}{}
			}
		case "address":
			if _, ok := fieldSeen[booking.FieldAddress]; !ok {
				selectedFields = append(selectedFields, booking.FieldAddress)
				fieldSeen[booking.FieldAddress] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		b.Select(selectedFields...)
	}
	return nil
}

type bookingPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []BookingPaginateOption
}

func newBookingPaginateArgs(rv map[string]interface{}) *bookingPaginateArgs {
	args := &bookingPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (c *CustomerQuery) CollectFields(ctx context.Context, satisfies ...string) (*CustomerQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return c, nil
	}
	if err := c.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return c, nil
}

func (c *CustomerQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(customer.Columns))
		selectedFields = []string{customer.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "name":
			if _, ok := fieldSeen[customer.FieldName]; !ok {
				selectedFields = append(selectedFields, customer.FieldName)
				fieldSeen[customer.FieldName] = struct{}{}
			}
		case "phoneNumber":
			if _, ok := fieldSeen[customer.FieldPhoneNumber]; !ok {
				selectedFields = append(selectedFields, customer.FieldPhoneNumber)
				fieldSeen[customer.FieldPhoneNumber] = struct{}{}
			}
		case "email":
			if _, ok := fieldSeen[customer.FieldEmail]; !ok {
				selectedFields = append(selectedFields, customer.FieldEmail)
				fieldSeen[customer.FieldEmail] = struct{}{}
			}
		case "licenseID":
			if _, ok := fieldSeen[customer.FieldLicenseID]; !ok {
				selectedFields = append(selectedFields, customer.FieldLicenseID)
				fieldSeen[customer.FieldLicenseID] = struct{}{}
			}
		case "address":
			if _, ok := fieldSeen[customer.FieldAddress]; !ok {
				selectedFields = append(selectedFields, customer.FieldAddress)
				fieldSeen[customer.FieldAddress] = struct{}{}
			}
		case "membershipNumber":
			if _, ok := fieldSeen[customer.FieldMembershipNumber]; !ok {
				selectedFields = append(selectedFields, customer.FieldMembershipNumber)
				fieldSeen[customer.FieldMembershipNumber] = struct{}{}
			}
		case "isActive":
			if _, ok := fieldSeen[customer.FieldIsActive]; !ok {
				selectedFields = append(selectedFields, customer.FieldIsActive)
				fieldSeen[customer.FieldIsActive] = struct{}{}
			}
		case "password":
			if _, ok := fieldSeen[customer.FieldPassword]; !ok {
				selectedFields = append(selectedFields, customer.FieldPassword)
				fieldSeen[customer.FieldPassword] = struct{}{}
			}
		case "createAt":
			if _, ok := fieldSeen[customer.FieldCreateAt]; !ok {
				selectedFields = append(selectedFields, customer.FieldCreateAt)
				fieldSeen[customer.FieldCreateAt] = struct{}{}
			}
		case "updateAt":
			if _, ok := fieldSeen[customer.FieldUpdateAt]; !ok {
				selectedFields = append(selectedFields, customer.FieldUpdateAt)
				fieldSeen[customer.FieldUpdateAt] = struct{}{}
			}
		case "role":
			if _, ok := fieldSeen[customer.FieldRole]; !ok {
				selectedFields = append(selectedFields, customer.FieldRole)
				fieldSeen[customer.FieldRole] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		c.Select(selectedFields...)
	}
	return nil
}

type customerPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []CustomerPaginateOption
}

func newCustomerPaginateArgs(rv map[string]interface{}) *customerPaginateArgs {
	args := &customerPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (f *FlightQuery) CollectFields(ctx context.Context, satisfies ...string) (*FlightQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return f, nil
	}
	if err := f.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return f, nil
}

func (f *FlightQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(flight.Columns))
		selectedFields = []string{flight.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "name":
			if _, ok := fieldSeen[flight.FieldName]; !ok {
				selectedFields = append(selectedFields, flight.FieldName)
				fieldSeen[flight.FieldName] = struct{}{}
			}
		case "from":
			if _, ok := fieldSeen[flight.FieldFrom]; !ok {
				selectedFields = append(selectedFields, flight.FieldFrom)
				fieldSeen[flight.FieldFrom] = struct{}{}
			}
		case "to":
			if _, ok := fieldSeen[flight.FieldTo]; !ok {
				selectedFields = append(selectedFields, flight.FieldTo)
				fieldSeen[flight.FieldTo] = struct{}{}
			}
		case "departDate":
			if _, ok := fieldSeen[flight.FieldDepartDate]; !ok {
				selectedFields = append(selectedFields, flight.FieldDepartDate)
				fieldSeen[flight.FieldDepartDate] = struct{}{}
			}
		case "departTime":
			if _, ok := fieldSeen[flight.FieldDepartTime]; !ok {
				selectedFields = append(selectedFields, flight.FieldDepartTime)
				fieldSeen[flight.FieldDepartTime] = struct{}{}
			}
		case "status":
			if _, ok := fieldSeen[flight.FieldStatus]; !ok {
				selectedFields = append(selectedFields, flight.FieldStatus)
				fieldSeen[flight.FieldStatus] = struct{}{}
			}
		case "availableSlots":
			if _, ok := fieldSeen[flight.FieldAvailableSlots]; !ok {
				selectedFields = append(selectedFields, flight.FieldAvailableSlots)
				fieldSeen[flight.FieldAvailableSlots] = struct{}{}
			}
		case "returnDate":
			if _, ok := fieldSeen[flight.FieldReturnDate]; !ok {
				selectedFields = append(selectedFields, flight.FieldReturnDate)
				fieldSeen[flight.FieldReturnDate] = struct{}{}
			}
		case "type":
			if _, ok := fieldSeen[flight.FieldType]; !ok {
				selectedFields = append(selectedFields, flight.FieldType)
				fieldSeen[flight.FieldType] = struct{}{}
			}
		case "flightPlane":
			if _, ok := fieldSeen[flight.FieldFlightPlane]; !ok {
				selectedFields = append(selectedFields, flight.FieldFlightPlane)
				fieldSeen[flight.FieldFlightPlane] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[flight.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, flight.FieldCreatedAt)
				fieldSeen[flight.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[flight.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, flight.FieldUpdatedAt)
				fieldSeen[flight.FieldUpdatedAt] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		f.Select(selectedFields...)
	}
	return nil
}

type flightPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []FlightPaginateOption
}

func newFlightPaginateArgs(rv map[string]interface{}) *flightPaginateArgs {
	args := &flightPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput interface{}, path ...string) map[string]interface{} {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	for _, name := range path {
		var field *graphql.CollectedField
		for _, f := range graphql.CollectFields(oc, fc.Field.Selections, nil) {
			if f.Alias == name {
				field = &f
				break
			}
		}
		if field == nil {
			return nil
		}
		cf, err := fc.Child(ctx, *field)
		if err != nil {
			args := field.ArgumentMap(oc.Variables)
			return unmarshalArgs(ctx, whereInput, args)
		}
		fc = cf
	}
	return fc.Args
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput interface{}, args map[string]interface{}) map[string]interface{} {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

func limitRows(partitionBy string, limit int, orderBy ...sql.Querier) func(s *sql.Selector) {
	return func(s *sql.Selector) {
		d := sql.Dialect(s.Dialect())
		s.SetDistinct(false)
		with := d.With("src_query").
			As(s.Clone()).
			With("limited_query").
			As(
				d.Select("*").
					AppendSelectExprAs(
						sql.RowNumber().PartitionBy(partitionBy).OrderExpr(orderBy...),
						"row_number",
					).
					From(d.Table("src_query")),
			)
		t := d.Table("limited_query").As(s.TableName())
		*s = *d.Select(s.UnqualifiedColumns()...).
			From(t).
			Where(sql.LTE(t.C("row_number"), limit)).
			Prefix(with)
	}
}

// mayAddCondition appends another type condition to the satisfies list
// if condition is enabled (Node/Nodes) and it does not exist in the list.
func mayAddCondition(satisfies []string, typeCond string) []string {
	if len(satisfies) == 0 {
		return satisfies
	}
	for _, s := range satisfies {
		if typeCond == s {
			return satisfies
		}
	}
	return append(satisfies, typeCond)
}
